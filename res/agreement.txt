METHODS
http://www.restapitutorial.ru/lessons/httpmethods.html
GET - получение объекта - 200 (OK) / 404 (Not Found)
PUT - обновление объекта - 200 (OK) или 204 (No Content). 404 (Not Found), в случае отсутствия экземпляра с указанным ID
POST - создание объекта - 201 (Created) / 404 (Not Found).
DELETE - удаление объекта - 200 (OK) или 204 (No Content). 404 (Not Found), в случае отсутствия экземпляра с указанным ID

HTTP Response Codes
http://www.restapitutorial.com/lessons/restquicktips.html
200 OK General success status code. This is the most common code. Used to indicate success.
201 CREATED Successful creation occurred (via either POST or PUT). Set the Location header to contain a link to the newly-created resource (on POST). Response body content may or may not be present.
204 NO CONTENT Indicates success but nothing is in the response body, often used for DELETE and PUT operations.
400 BAD REQUEST General error for when fulfilling the request would cause an invalid state. Domain validation errors, missing data, etc. are some examples.
401 UNAUTHORIZED Error code response for missing or invalid authentication token.
403 FORBIDDEN Error code for when the user is not authorized to perform the operation or the resource is unavailable for some reason (e.g. time constraints, etc.).
404 NOT FOUND Used when the requested resource is not found, whether it doesn't exist or if there was a 401 or 403 that, for security reasons, the service wants to mask.
405 METHOD NOT ALLOWED Used to indicate that the requested URL exists, but the requested HTTP method is not applicable. For example, POST /users/12345 where the API doesn't support creation of resources this way (with a provided ID). The Allow HTTP header must be set when returning a 405 to indicate the HTTP methods that are supported. In the previous case, the header would look like "Allow: GET, PUT, DELETE"
409 CONFLICT Whenever a resource conflict would be caused by fulfilling the request. Duplicate entries, such as trying to create two customers with the same information, and deleting root objects when cascade-delete is not supported are a couple of examples.
500 INTERNAL SERVER ERROR Never return this intentionally. The general catch-all error when the server-side throws an exception. Use this only for errors that the consumer cannot address from their end.

NAMING
https://learn.javascript.ru/function-basics#function-naming
http://habrahabr.ru/post/189872/
1) Объекты и классы
 Player, Tickets, Slider
2) Функции - Первое слово с маленькой буквы, все последующие с большой, предпочтительнее длинное имя, которое бы описывало действие функции
 playAudio(), updateBalance(), isNumeric()
3) Переменные - Первое слово с маленькой буквы, все последующие с большой
selectedBalls, points, name - переменные
4) Массивы - Используйте множественную форму слова: Idiomatic
 var documents = [];

FOLDERS:
/res/ - корень
----/css - скомпилированные стили
----/---/images - картинки стилей
----/sass - исходники стилей

JSON
https://dev.twitter.com/rest/reference/get/lists/list
http://docs.timdorr.apiary.io/#reference/vehicles/state-and-settings/charge-state
{
    "cache": // необязательный параметр
            false // принудительно пропускается кеширование ответа
            60000 // если числовое значение, то к текущему времени клиента прибавляется время в секундах, получаем date_expired
            null // кешируется до тех пор, пока не обновится touched
    "message": string, // не обязательный параметр, если есть, выводится в случае ошибки/успеха
    "res": объект или массив // не обязательный параметр
}

PING
ежеминутный пинг
{
    "recache": // необязательный параметр, содержащий объекты, которые необходимо перекешировать
            {
                '/blog/posts/',
                '/games/online/',
                '/prizes/exchange/',
                '/prizes/exchange/goods/:id'
            }
}